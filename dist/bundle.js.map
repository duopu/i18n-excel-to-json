{"version":3,"file":"bundle.js","sources":["../src/generate/index.v2.js"],"sourcesContent":["const xlsx = require('xlsx');\r\nconst axios = require('axios');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nlet config = {\r\n    filePath: '../../demo/file/basic.xls',\r\n    output: '../../demo/file/output'\r\n}\r\n\r\n\r\nconst translate = async (text, targetLang) => {\r\n    return text;\r\n    const url = `https://libretranslate.com/translate`;\r\n    try {\r\n        const response = await axios.post(url, {\r\n            q: text,\r\n            source: 'zh',\r\n            target: targetLang,\r\n            format: 'text'\r\n        });\r\n        return response.data.translatedText;\r\n    } catch (error) {\r\n        console.error(`Error translating text: ${ text }`, error);\r\n        return text; // Return original text if translation fails\r\n    }\r\n};\r\n\r\nconst setNestedValue = (obj, keys, value) => {\r\n    let temp = obj;\r\n    keys.forEach((key, index) => {\r\n        if (index === keys.length - 1) {\r\n            temp[key] = value;\r\n        } else {\r\n            temp[key] = temp[key] || {};\r\n            temp = temp[key];\r\n        }\r\n    });\r\n};\r\n\r\nconst processSheet = async (sheetName, sheetData) => {\r\n    const jsonCN = {};\r\n    const jsonEN = {};\r\n    const jsonTW = {};\r\n\r\n    let previousKey1 = null;\r\n\r\n    for (let row = 1; row < sheetData.length; row++) {\r\n        const key1 = sheetData[row][0];\r\n        const key2 = sheetData[row][1];\r\n        const chineseText = sheetData[row][2];\r\n        const cnText = sheetData[row][3];\r\n        const twText = sheetData[row][4];\r\n\r\n        if (!key1) {\r\n            if (previousKey1 && key2) {\r\n                const nestedKeys = key2.split('.').map(k => k.trim());\r\n                setNestedValue(jsonCN, [previousKey1, ...nestedKeys], chineseText);\r\n                setNestedValue(jsonTW, [previousKey1, ...nestedKeys], twText || await translate(chineseText, 'zh-TW'));\r\n                setNestedValue(jsonEN, [previousKey1, ...nestedKeys], cnText || await translate(chineseText, 'en'));\r\n            }\r\n            continue;\r\n        }\r\n\r\n        if (key1 && !key2) {\r\n            jsonCN[key1] = chineseText;\r\n            jsonTW[key1] = twText || await translate(chineseText, 'zh-TW');\r\n            jsonEN[key1] = cnText || await translate(chineseText, 'en');\r\n            previousKey1 = key1;\r\n        }\r\n\r\n        if (key1 && key2) {\r\n            const compositeKey = `${ key1 }.${ key2 }`;\r\n            jsonCN[compositeKey] = chineseText;\r\n            jsonTW[compositeKey] = twText || await translate(chineseText, 'zh-TW');\r\n            jsonEN[compositeKey] = cnText || await translate(chineseText, 'en');\r\n            previousKey1 = key1;\r\n        }\r\n    }\r\n\r\n    const prefix = path.resolve(__dirname, config.output);\r\n\r\n    const outputDirs = ['zh_CN', 'en_US', 'zh_TW'];\r\n    outputDirs.forEach(dir => {\r\n        dir = path.resolve(prefix, dir);\r\n        if (!fs.existsSync(dir)) {\r\n            fs.mkdirSync(dir, { recursive: true });\r\n        }\r\n    });\r\n\r\n    const outputPathCN = path.resolve(prefix, outputDirs[0], `${ sheetName }.json`);\r\n    const outputPathEN = path.resolve(prefix, outputDirs[1], `${ sheetName }.json`);\r\n    const outputPathTW = path.resolve(prefix, outputDirs[2], `${ sheetName }.json`);\r\n\r\n    fs.writeFileSync(outputPathCN, JSON.stringify(jsonCN, null, 2), 'utf8');\r\n    fs.writeFileSync(outputPathEN, JSON.stringify(jsonEN, null, 2), 'utf8');\r\n    fs.writeFileSync(outputPathTW, JSON.stringify(jsonTW, null, 2), 'utf8');\r\n};\r\n\r\nconst main = async (conf) => {\r\n    // const filePath = path.join(__dirname, 'basic.xls');\r\n    config = conf;\r\n    const filePath = path.join(__dirname, config.filePath);\r\n\r\n    const workbook = xlsx.readFile(filePath);\r\n    const sheetNames = workbook.SheetNames;\r\n\r\n    for (const sheetName of sheetNames) {\r\n        const sheet = workbook.Sheets[sheetName];\r\n        const sheetData = xlsx.utils.sheet_to_json(sheet, { header: 1 });\r\n\r\n        await processSheet(sheetName, sheetData);\r\n    }\r\n};\r\n\r\n// main(config);\r\n// module.exports = main;\r\n\r\nexport default main;\r\n"],"names":["xlsx","require","fs","path","config","filePath","output","translate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","text","targetLang","url","response","wrap","_context","prev","next","abrupt","sent","data","translatedText","t0","console","error","concat","stop","_x","_x2","apply","this","arguments","setNestedValue","obj","keys","value","temp","forEach","key","index","length","processSheet","_ref2","_callee2","sheetName","sheetData","jsonCN","jsonEN","jsonTW","previousKey1","row","key1","key2","chineseText","cnText","twText","nestedKeys","compositeKey","prefix","outputDirs","outputPathCN","outputPathEN","outputPathTW","_context2","split","map","k","trim","_toConsumableArray","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","resolve","__dirname","dir","existsSync","mkdirSync","recursive","writeFileSync","JSON","stringify","_x3","_x4","main","_ref3","_callee3","conf","workbook","sheetNames","_iterator","_step","sheet","_context3","join","readFile","SheetNames","_createForOfIteratorHelper","s","n","done","Sheets","utils","sheet_to_json","header","e","f","finish","_x5"],"mappings":"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"}