{"version":3,"file":"bundle.js","sources":["../src/generate/index.v2.js","../src/index.js"],"sourcesContent":["const xlsx = require('xlsx');\r\nconst axios = require('axios');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\nconst translate = async (text, targetLang) => {\r\n    const url = `https://libretranslate.com/translate`;\r\n    try {\r\n        const response = await axios.post(url, {\r\n            q: text,\r\n            source: 'zh',\r\n            target: targetLang,\r\n            format: 'text'\r\n        });\r\n        return response.data.translatedText;\r\n    } catch (error) {\r\n        console.error(`Error translating text: ${text}`, error);\r\n        return text; // Return original text if translation fails\r\n    }\r\n};\r\n\r\nconst setNestedValue = (obj, keys, value) => {\r\n    let temp = obj;\r\n    keys.forEach((key, index) => {\r\n        if (index === keys.length - 1) {\r\n            temp[key] = value;\r\n        } else {\r\n            temp[key] = temp[key] || {};\r\n            temp = temp[key];\r\n        }\r\n    });\r\n};\r\n\r\nconst processSheet = async (sheetName, sheetData) => {\r\n    const jsonCN = {};\r\n    const jsonEN = {};\r\n    const jsonTW = {};\r\n\r\n    let previousKey1 = null;\r\n\r\n    for (let row = 1; row < sheetData.length; row++) {\r\n        const key1 = sheetData[row][0];\r\n        const key2 = sheetData[row][1];\r\n        const chineseText = sheetData[row][2];\r\n        const cnText = sheetData[row][3];\r\n        const twText = sheetData[row][4];\r\n\r\n        if (!key1) {\r\n            if (previousKey1 && key2) {\r\n                const nestedKeys = key2.split('.').map(k => k.trim());\r\n                setNestedValue(jsonCN, [previousKey1, ...nestedKeys], chineseText);\r\n                setNestedValue(jsonTW, [previousKey1, ...nestedKeys], twText || await translate(chineseText, 'zh-TW'));\r\n                setNestedValue(jsonEN, [previousKey1, ...nestedKeys], cnText || await translate(chineseText, 'en'));\r\n            }\r\n            continue;\r\n        }\r\n\r\n        if (key1 && !key2) {\r\n            jsonCN[key1] = chineseText;\r\n            jsonTW[key1] = twText || await translate(chineseText, 'zh-TW');\r\n            jsonEN[key1] = cnText || await translate(chineseText, 'en');\r\n            previousKey1 = key1;\r\n        }\r\n\r\n        if (key1 && key2) {\r\n            const compositeKey = `${key1}.${key2}`;\r\n            jsonCN[compositeKey] = chineseText;\r\n            jsonTW[compositeKey] = twText || await translate(chineseText, 'zh-TW');\r\n            jsonEN[compositeKey] = cnText || await translate(chineseText, 'en');\r\n            previousKey1 = key1;\r\n        }\r\n    }\r\n\r\n    const outputDirs = ['zh_CN', 'en_US', 'zh_TW'];\r\n    outputDirs.forEach(dir => {\r\n        if (!fs.existsSync(dir)) {\r\n            fs.mkdirSync(dir);\r\n        }\r\n    });\r\n\r\n    const outputPathCN = path.join('zh_CN', `${sheetName}.json`);\r\n    const outputPathEN = path.join('en_US', `${sheetName}.json`);\r\n    const outputPathTW = path.join('zh_TW', `${sheetName}.json`);\r\n\r\n    fs.writeFileSync(outputPathCN, JSON.stringify(jsonCN, null, 2), 'utf8');\r\n    fs.writeFileSync(outputPathEN, JSON.stringify(jsonEN, null, 2), 'utf8');\r\n    fs.writeFileSync(outputPathTW, JSON.stringify(jsonTW, null, 2), 'utf8');\r\n};\r\n\r\nexport const main = async () => {\r\n    const filePath = path.join(__dirname, 'basic.xls');\r\n\r\n    const workbook = xlsx.readFile(filePath);\r\n    const sheetNames = workbook.SheetNames;\r\n\r\n    for (const sheetName of sheetNames) {\r\n        const sheet = workbook.Sheets[sheetName];\r\n        const sheetData = xlsx.utils.sheet_to_json(sheet, { header: 1 });\r\n\r\n        await processSheet(sheetName, sheetData);\r\n    }\r\n};\r\n\r\n","import { main } from \"./generate/index.v2\";\r\n\r\nmain().catch(error => console.error(error));\r\n"],"names":["xlsx","require","axios","fs","path","translate","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","text","targetLang","response","wrap","_context","prev","next","post","q","source","target","format","sent","abrupt","data","translatedText","t0","console","error","concat","stop","_x","_x2","apply","this","arguments","setNestedValue","obj","keys","value","temp","forEach","key","index","length","processSheet","_ref2","_callee2","sheetName","sheetData","jsonCN","jsonEN","jsonTW","previousKey1","row","key1","key2","chineseText","cnText","twText","nestedKeys","compositeKey","outputPathCN","outputPathEN","outputPathTW","_context2","split","map","k","trim","_toConsumableArray","t1","t2","t3","t4","t5","t6","t7","t8","t9","t10","t11","t12","t13","dir","existsSync","mkdirSync","join","writeFileSync","JSON","stringify","_x3","_x4","_ref3","_callee3","filePath","workbook","sheetNames","_iterator","_step","sheet","_context3","__dirname","readFile","SheetNames","_createForOfIteratorHelper","s","n","done","Sheets","utils","sheet_to_json","header","e","f","finish","main"],"mappings":"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"}